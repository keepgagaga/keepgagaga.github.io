<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="cn">
    <title type="text">Sand Blog</title>
    <subtitle type="html">MemE is a powerful and highly customizable GoHugo theme for personal blogs.</subtitle>
    <updated>2022-05-10T23:03:51&#43;08:00</updated>
    <id>/</id>
    <link rel="alternate" type="text/html" href="/" />
    <link rel="self" type="application/atom&#43;xml" href="/atom.xml" />
    <author>
            <name>Sand</name>
            <uri>/</uri>
            
                <email>z@ruiruizhang.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights>
    <generator uri="https://gohugo.io/" version="0.88.1">Hugo</generator>
        <entry>
            <title type="text">Kali_linux_install</title>
            <link rel="alternate" type="text/html" href="/posts/kali_linux_install/" />
            <id>/posts/kali_linux_install/</id>
            <updated>2022-05-10T22:54:57&#43;08:00</updated>
            <published>2022-04-28T22:28:21&#43;08:00</published>
            <author>
                    <name>Sand</name>
                    <uri>https://saulzh.github.io/</uri>
                    <email>z@ruiruizhang.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">最近日常逛TK教主的微博，发现教主在抽奖一本《Python黑帽子：黑客与渗透测试编程之道（第2版）》，本着一颗折腾的心，就去微信读书翻了下，竟然觉得挺有意思，正好快五一了，也不能出去玩，想着不如五一折腾下渗透技术，顺便学习了解下python。
首先就是安装 kali linux, 这是个集成了很多渗透工具的基于 debian 的 Linux 发行版，不仅功能强大，颜值也很高：）
由于手头上没有专门的机器来安装，于是就只能用虚拟机来安装。
先从 kali 官网下载 iso 镜像，选择推荐的 Bare Metal 选项，之后根据自己的电脑选择不同版本，如64位、32位、Apple M1 版等。
由于我现在手上用的是 M1 芯片的本子，也没有其他机器，只能选择 M1 版本的。
下载完成后，我们需要一个虚拟机工具，这里选择 UTM（没什么特别的，就是刚好找到了它，然后它也正好能用：）
然后就是安装 UTM，打开&amp;ndash;&amp;gt;新建虚拟机&amp;ndash;&amp;gt;选择Linux&amp;ndash;&amp;gt;选择内存大小&amp;ndash;&amp;gt;选择硬盘大小&amp;ndash;&amp;gt;共享目录（跳过，不设置）&amp;ndash;&amp;gt;在摘要里设置虚拟机名字（其他不动）&amp;ndash;&amp;gt;保存。
接下来就是点击虚拟机运行图标，进入安装虚拟机界面，在这里我选择的是图形化安装，不得不说 kali 的安装引导做得非常好，不需要你去疑惑猜测，顺着官方的推荐来就行，很快安装完毕。
然后回到虚拟机管理界面，在 CD/DVD 选项中选择清除，将 ISO 文件清理掉，这样再次进入的时候就不会再进入安装引导界面了。
进入 Kali Linux 界面，不能不说 Kali 的颜值是我喜欢的类型，看着比 ubuntu 舒服多了：）</summary>
            
                <content type="html">&lt;p&gt;最近日常逛TK教主的微博，发现教主在抽奖一本《Python黑帽子：黑客与渗透测试编程之道（第2版）》，本着一颗折腾的心，就去微信读书翻了下，竟然觉得挺有意思，正好快五一了，也不能出去玩，想着不如五一折腾下渗透技术，顺便学习了解下python。&lt;/p&gt;
&lt;p&gt;首先就是安装 kali linux, 这是个集成了很多渗透工具的基于 debian 的 Linux 发行版，不仅功能强大，颜值也很高：）&lt;/p&gt;
&lt;p&gt;由于手头上没有专门的机器来安装，于是就只能用虚拟机来安装。&lt;/p&gt;
&lt;p&gt;先从 kali 官网下载 iso 镜像，选择推荐的 Bare Metal 选项，之后根据自己的电脑选择不同版本，如64位、32位、Apple M1 版等。&lt;/p&gt;
&lt;p&gt;由于我现在手上用的是 M1 芯片的本子，也没有其他机器，只能选择 M1 版本的。&lt;/p&gt;
&lt;p&gt;下载完成后，我们需要一个虚拟机工具，这里选择 UTM（没什么特别的，就是刚好找到了它，然后它也正好能用：）&lt;/p&gt;
&lt;p&gt;然后就是安装 UTM，打开&amp;ndash;&amp;gt;新建虚拟机&amp;ndash;&amp;gt;选择Linux&amp;ndash;&amp;gt;选择内存大小&amp;ndash;&amp;gt;选择硬盘大小&amp;ndash;&amp;gt;共享目录（跳过，不设置）&amp;ndash;&amp;gt;在摘要里设置虚拟机名字（其他不动）&amp;ndash;&amp;gt;保存。&lt;/p&gt;
&lt;p&gt;接下来就是点击虚拟机运行图标，进入安装虚拟机界面，在这里我选择的是图形化安装，不得不说 kali 的安装引导做得非常好，不需要你去疑惑猜测，顺着官方的推荐来就行，很快安装完毕。&lt;/p&gt;
&lt;p&gt;然后回到虚拟机管理界面，在 CD/DVD 选项中选择清除，将 ISO 文件清理掉，这样再次进入的时候就不会再进入安装引导界面了。&lt;/p&gt;
&lt;p&gt;进入 Kali Linux 界面，不能不说 Kali 的颜值是我喜欢的类型，看着比 ubuntu 舒服多了：）&lt;/p&gt;
&lt;p&gt;常规操作，进来先更新一波软件，但由于一些软件的依赖问题，导致不能正常更新，于是只能使用 sudo apt full-upgrade -y 来更新了&amp;hellip;&lt;/p&gt;
&lt;p&gt;于是，十几分钟后你就拥有了一台 kali 虚拟机可以玩耍了。&lt;/p&gt;
&lt;p&gt;初步使用起来感觉还不错，有种小巧精致的感觉，以后拿来做日常 Linux 版本使用也不错哦。&lt;/p&gt;
&lt;p&gt;后续再更新渗透的技术学习笔记。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Flutter_i18n</title>
            <link rel="alternate" type="text/html" href="/posts/flutter_i18n/" />
            <id>/posts/flutter_i18n/</id>
            <updated>2022-05-10T22:55:17&#43;08:00</updated>
            <published>2022-04-26T16:47:13&#43;08:00</published>
            <author>
                    <name>Sand</name>
                    <uri>https://saulzh.github.io/</uri>
                    <email>z@ruiruizhang.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Flutter_responsive</title>
            <link rel="alternate" type="text/html" href="/posts/flutter_responsive/" />
            <id>/posts/flutter_responsive/</id>
            <updated>2022-04-28T22:26:47&#43;08:00</updated>
            <published>2022-04-26T10:21:00&#43;08:00</published>
            <author>
                    <name>Sand</name>
                    <uri>https://saulzh.github.io/</uri>
                    <email>z@ruiruizhang.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">很早之前找到的一个方案，使用下来感觉没啥毛病，除了每个页面都要引入麻烦些，原方案还拓展了 int，但感觉 double 能兼容 int 的绝大部分场景，偷个懒就只用 double 了。
使用的时候按照设计图当前的尺寸改一下 standardWidth ，比如这里的意思就是当前设计图的尺寸是按 750 宽度设计的。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  class SizeFit { static late MediaQueryData _mediaQueryData; static late double screenWidth; static late double screenHeight; static late double rpx; static late double px; static void initialize(BuildContext context, {double standardWidth = 750}) { _mediaQueryData = MediaQuery.</summary>
            
                <content type="html">&lt;p&gt;很早之前找到的一个方案，使用下来感觉没啥毛病，除了每个页面都要引入麻烦些，原方案还拓展了 int，但感觉 double 能兼容 int 的绝大部分场景，偷个懒就只用 double 了。&lt;/p&gt;
&lt;p&gt;使用的时候按照设计图当前的尺寸改一下 standardWidth ，比如这里的意思就是当前设计图的尺寸是按 750 宽度设计的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SizeFit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;late&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MediaQueryData&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_mediaQueryData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;late&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screenWidth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;late&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screenHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;late&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rpx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;late&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BuildContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;standardWidth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;750&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;_mediaQueryData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MediaQuery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;screenWidth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_mediaQueryData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;screenHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_mediaQueryData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;rpx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screenWidth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;standardWidth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screenWidth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;standardWidth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// 按照像素来设置
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setPx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SizeFit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rpx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// 按照rpx来设置
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setRpx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SizeFit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rpx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DoubleFit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SizeFit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setPx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rpx&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SizeFit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setRpx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// use
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Widget&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BuildContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;SizeFit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;width:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;100.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rpx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;height:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;100.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rpx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;color:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;red&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Flutter_pulldown_refresh_and_reach__bottom</title>
            <link rel="alternate" type="text/html" href="/posts/flutter_pulldown_refresh_and_reach__bottom/" />
            <id>/posts/flutter_pulldown_refresh_and_reach__bottom/</id>
            <updated>2022-04-28T22:26:47&#43;08:00</updated>
            <published>2022-04-26T09:42:42&#43;08:00</published>
            <author>
                    <name>Sand</name>
                    <uri>https://saulzh.github.io/</uri>
                    <email>z@ruiruizhang.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">下拉刷新 最简单的方法，使用 RefreshIndicator 组件，在 onRefresh 里刷新数据即可
上拉加载更多 通过获取 ScrollController 的 maxScrollExtent 来确定有没有到底，然后在此基础上做加载更多的操作</summary>
            
                <content type="html">&lt;h1 id=&#34;下拉刷新&#34;&gt;下拉刷新&lt;/h1&gt;
&lt;p&gt;最简单的方法，使用 RefreshIndicator 组件，在 onRefresh 里刷新数据即可&lt;/p&gt;
&lt;h1 id=&#34;上拉加载更多&#34;&gt;上拉加载更多&lt;/h1&gt;
&lt;p&gt;通过获取 ScrollController 的 maxScrollExtent 来确定有没有到底，然后在此基础上做加载更多的操作&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">旧识新知</title>
            <link rel="alternate" type="text/html" href="/posts/old-knowledge-new-know/" />
            <id>/posts/old-knowledge-new-know/</id>
            <updated>2022-05-10T22:55:05&#43;08:00</updated>
            <published>2022-04-22T11:16:32&#43;08:00</published>
            <author>
                    <name>Sand</name>
                    <uri>https://saulzh.github.io/</uri>
                    <email>z@ruiruizhang.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">有很多标签和属性都是以前遇到但熟视无睹的，因为很多时候并不影响功能实现，都是选择性无视的，但闲来无事的时候还是想搞清楚这些奇奇怪怪的东西都是干嘛的。
 og 属性  1  &amp;lt;meta property=&amp;#34;og:site_name&amp;#34; content=&amp;#34;...&amp;#34; /&amp;gt;    专为苹果设备优化的信息  1  &amp;lt;meta name=&amp;#34;apple-mobile-web-app-title&amp;#34; content=&amp;#34;...&amp;#34; /&amp;gt;    theme  1  &amp;lt;meta name=&amp;#34;theme-color&amp;#34; content=&amp;#34;#ffffff&amp;#34; /&amp;gt;   这是 Apple 状态栏颜色元标记的适当 Web 标准式等效物。它告诉浏览器为周围的 UI 设置主题。Android 上的 Chrome 和桌面上的 Brave 在这方面都做得很好。您可以在内容中放置任何 CSS 颜色，甚至可以使用该media属性仅针对特定媒体查询显示此颜色，例如支持深色主题。您还可以在 Web 应用清单中定义此属性和其他属性。</summary>
            
                <content type="html">&lt;!-- 前端总有一些知识是你不知道的。

也许框架帮你处理好了这些事情，但知道这些东西是无关乎框架的，是长久的。 --&gt;
&lt;p&gt;有很多标签和属性都是以前遇到但熟视无睹的，因为很多时候并不影响功能实现，都是选择性无视的，但闲来无事的时候还是想搞清楚这些奇奇怪怪的东西都是干嘛的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;og 属性&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;og:site_name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;专为苹果设备优化的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;apple-mobile-web-app-title&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;theme&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;theme-color&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;#ffffff&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这是 Apple 状态栏颜色元标记的适当 Web 标准式等效物。它告诉浏览器为周围的 UI 设置主题。Android 上的 Chrome 和桌面上的 Brave 在这方面都做得很好。您可以在内容中放置任何 CSS 颜色，甚至可以使用该media属性仅针对特定媒体查询显示此颜色，例如支持深色主题。您还可以在 Web 应用清单中定义此属性和其他属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;origin-trial&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;http-equiv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;origin-trial&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;text-size-adjust&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;html{-ms-text-size-adjust:100%;-webkit-text...
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;假设您没有移动响应站点，并且您在小屏幕上打开它，因此浏览器可能会调整文本大小以使其更大以便更易于阅读。CSStext-size-adjust属性可以使用值 none 禁用此功能，也可以指定允许浏览器放大文本的百分比。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;body{margin:0;}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为不同的浏览器具有不同的默认样式（用户代理样式表），您希望通过重置属性来覆盖它们，以便您的网站在不同设备上看起来相同。在这种情况下，Twitter 告诉浏览器删除 body 标签的默认边距。这只是为了减少浏览器的不一致，但我更喜欢规范化样式而不是重置它们，即跨浏览器应用相同的默认值而不是完全删除它们。人们甚至过去使用* { margin: 0 }它完全是矫枉过正并且对性能不利，但现在导入类似normalize.cssor reset.css（甚至更新的东西）并从那里开始是很常见的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;link rel=&#34;search&#34; type=&#34;application/opensearchdescription+xml&#34; href=&#34;/opensearch.xml&#34; title=&#34;Twitter&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;告诉浏览器用户可以将 Twitter 添加为搜索引擎。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;link rel=&#34;preload&#34; as=&#34;script&#34; crossorigin=&#34;anonymous&#34; href=&#34;https://abs.twimg.com/responsive-web/client-web/polyfills.cad508b5.js&#34; nonce=&#34;MGUyZTIyN2ItMDM1ZC00MzE5LWE2YmMtYTU5NTg2MDU0OTM1&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有许多可以讨论的有趣属性，尤其是nonce.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;link rel=&#34;alternate&#34; hreflang=&#34;x-default&#34; href=&#34;https://twitter.com/&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用于国际登陆页面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;:focus:not([data-focusvisible-polyfill]){outline: none;}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用于在不使用键盘导航时移除焦点轮廓（CSS:focus-visible选择器在此处填充）。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Css Layouts</title>
            <link rel="alternate" type="text/html" href="/posts/css-layouts/" />
            <id>/posts/css-layouts/</id>
            <updated>2022-05-10T22:55:23&#43;08:00</updated>
            <published>2022-04-19T23:33:07&#43;08:00</published>
            <author>
                    <name>Sand</name>
                    <uri>https://saulzh.github.io/</uri>
                    <email>z@ruiruizhang.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">记录一些常用的布局方式，以及布局的一些细节。
 grid 布局  1    </summary>
            
                <content type="html">&lt;p&gt;记录一些常用的布局方式，以及布局的一些细节。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grid 布局&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Ios_mix_flutter</title>
            <link rel="alternate" type="text/html" href="/posts/ios_mix_flutter/" />
            <id>/posts/ios_mix_flutter/</id>
            <updated>2022-05-10T22:54:50&#43;08:00</updated>
            <published>2022-04-18T21:17:14&#43;08:00</published>
            <author>
                    <name>Sand</name>
                    <uri>https://saulzh.github.io/</uri>
                    <email>z@ruiruizhang.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">采用把 Flutter SDK 及 Flutter 代码通过 CocoaPods 嵌入 iOS 工程里的方法，这种方法要求本地要有 Flutter 开发环境。
bug one: iOS 项目可以在真机上运行，但在模拟器上运行就会出现 No such module &amp;lsquo;FlutterPluginRegistrant&amp;rsquo; error。</summary>
            
                <content type="html">&lt;p&gt;采用把 Flutter SDK 及 Flutter 代码通过 CocoaPods 嵌入 iOS 工程里的方法，这种方法要求本地要有 Flutter 开发环境。&lt;/p&gt;
&lt;p&gt;bug one: iOS 项目可以在真机上运行，但在模拟器上运行就会出现 No such module &amp;lsquo;FlutterPluginRegistrant&amp;rsquo; error。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">route and applifecycle</title>
            <link rel="alternate" type="text/html" href="/posts/route_applifecycle/" />
            <id>/posts/route_applifecycle/</id>
            <updated>2022-04-16T21:27:10&#43;08:00</updated>
            <published>2022-04-16T20:54:20&#43;08:00</published>
            <author>
                    <name>Sand</name>
                    <uri>https://saulzh.github.io/</uri>
                    <email>z@ruiruizhang.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">遇到一个一环扣一环的坑，真的是绝了。
在做支付，支付完成后回到订单页面查询是否支付成功，然后更新总金额，但是遇到个诡异的事，成功获取总额后 setState 页面并没有更新总额，还是支付前的金额。
一步步排查，金额获取到了，是对的，也执行了 setState，也重新 build 了页面，还是不行。
就在看 build 部分的时候，突然发现热更新后也重新 build 了一次，而 setState 也会触发 build，但由于页面导航我在后面切换成了命名路由，于是接收页面参数的代码就放在了 build 方法里，然后这就会导致使用新的数据重新 build 时，前脚刚把数据更新成新的金额，后脚就在 build 时传入了路由带来的初始数据，于是页面的金额就怎么都不会改变了。
解决方法就是把获取命名路由参数的步骤提到 initState 方法里，但直接放进去肯定会报错，因为这时候页面还没有绘制好，所以要用 Future.delayed(Duration.zero, () {}) 来包住，这样就可以了。</summary>
            
                <content type="html">&lt;p&gt;遇到一个一环扣一环的坑，真的是绝了。&lt;/p&gt;
&lt;p&gt;在做支付，支付完成后回到订单页面查询是否支付成功，然后更新总金额，但是遇到个诡异的事，成功获取总额后 setState 页面并没有更新总额，还是支付前的金额。&lt;/p&gt;
&lt;p&gt;一步步排查，金额获取到了，是对的，也执行了 setState，也重新 build 了页面，还是不行。&lt;/p&gt;
&lt;p&gt;就在看 build 部分的时候，突然发现热更新后也重新 build 了一次，而 setState 也会触发 build，但由于页面导航我在后面切换成了命名路由，于是接收页面参数的代码就放在了 build 方法里，然后这就会导致使用新的数据重新 build 时，前脚刚把数据更新成新的金额，后脚就在 build 时传入了路由带来的初始数据，于是页面的金额就怎么都不会改变了。&lt;/p&gt;
&lt;p&gt;解决方法就是把获取命名路由参数的步骤提到 initState 方法里，但直接放进去肯定会报错，因为这时候页面还没有绘制好，所以要用 Future.delayed(Duration.zero, () {}) 来包住，这样就可以了。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">开始记录</title>
            <link rel="alternate" type="text/html" href="/posts/first/" />
            <id>/posts/first/</id>
            <updated>2022-04-16T20:56:49&#43;08:00</updated>
            <published>2022-04-07T22:36:08&#43;08:00</published>
            <author>
                    <name>Sand</name>
                    <uri>https://saulzh.github.io/</uri>
                    <email>z@ruiruizhang.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">博客最难的不是搭建，如今在博客模版+GitHub的帮助下，搭建一个博客从未如此简单。
困难的是写。算上从18年开始第一次折腾博客，到现在也三四年了，但真正写出来的文章屈指可数。
我有点强迫症，经常会在一些小事情上纠结，比如GitHub账号名我已经修改了不下四五次了，博客模版也折腾好几个，都不太满意，从最早的rails搭建的博客，到express搭建的博客，再到博客模版+GitHub Page，强迫症太难受了。
好在如今终于明白，对于博客来说，最重要的是去记录，是留下自己过去的痕迹，让自己在三年五年之后还能回忆起当初是如何思考的，虽然有很大概率会觉得之前的想法很蠢，但却不失为一种独特的记忆，毕竟，如果今天能看到小学时候的日记，我想无论当初的记录多蠢，我们都会怀念吧。</summary>
            
                <content type="html">&lt;p&gt;博客最难的不是搭建，如今在博客模版+GitHub的帮助下，搭建一个博客从未如此简单。&lt;/p&gt;
&lt;p&gt;困难的是写。算上从18年开始第一次折腾博客，到现在也三四年了，但真正写出来的文章屈指可数。&lt;/p&gt;
&lt;p&gt;我有点强迫症，经常会在一些小事情上纠结，比如GitHub账号名我已经修改了不下四五次了，博客模版也折腾好几个，都不太满意，从最早的rails搭建的博客，到express搭建的博客，再到博客模版+GitHub Page，强迫症太难受了。&lt;/p&gt;
&lt;p&gt;好在如今终于明白，对于博客来说，最重要的是去记录，是留下自己过去的痕迹，让自己在三年五年之后还能回忆起当初是如何思考的，虽然有很大概率会觉得之前的想法很蠢，但却不失为一种独特的记忆，毕竟，如果今天能看到小学时候的日记，我想无论当初的记录多蠢，我们都会怀念吧。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
</feed>
